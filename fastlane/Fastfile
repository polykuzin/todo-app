
# Файл, где лежат функции с кейЧейном
import "KeyChain"

# Наша любимая дефолтная платформа
default_platform(:ios)

# Id для апи ключа
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]

# Issuer Id Апи ключа коннекта
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]

# Id приложения в системе коннекта
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]

# Ключ p8 для выкладки в коннект
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]

# Логин и токен для авторации на гите
# (там хранятся сертификаты и профайлы)
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

# Чтобы сохранить сертификаты от Connect мы
# должны создать временную KeyChain - тут имя
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]

# Чтобы сохранить сертификаты от Connect мы
# должны создать временную KeyChain - тут пароль
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

# Просто Bundle Id прилки, чтобы всё чики-пони прошло
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]

# Название провижена, чтобы он подставился в нужное место (автоматом)
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]

platform :ios do
    
    # Чистим - больше для локальных нужд
    lane :clean do
        xcclean
        clear_derived_data
        clean_build_artifacts
    end
    
    # Линтовка - чтобы мы не забывали писать чисто =)
    lane :lint_code do
        swiftlint(
            mode: :lint, # SwiftLint mode: :lint (default) or :autocorrect
            output_file: "swiftlint.result.json", # The path of the output file (optional)
            reporter: "json", # The custom reporter to use (optional)
            config_file: ".swiftlint.yml", # The path of the configuration file (optional)
            ignore_exit_status: false, # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)
            quiet: false, # Don't print status logs like 'Linting ' & 'Done linting' (Default: false)
            strict: true # Fail on warnings? (Default: false)
        )
    end
    
    # Билдим, в зависимости от того, какая схема нужна
    lane :build do |scheme|
        environment = scheme[:environment]
        keychain_name = TEMP_KEYCHAIN_USER
        keychain_password = TEMP_KEYCHAIN_PASSWORD
        ensure_temp_keychain(keychain_name, keychain_password)

        api_key = app_store_connect_api_key(
            key_id: APPLE_KEY_ID,
            issuer_id: APPLE_ISSUER_ID,
            key_content: APPLE_KEY_CONTENT.gsub('\n', '\\n'),
            duration: 1200,
            in_house: false
        )

        increment_build_number(
            build_number: latest_testflight_build_number + 1,
            xcodeproj: "todo-app.xcodeproj"
        )

        match(
            type: 'appstore',
            app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
            git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
            readonly: true,
            keychain_name: keychain_name,
            keychain_password: keychain_password,
            api_key: api_key
        )

        gym(
            configuration: environment,
            project: "todo-app.xcodeproj",
            clean: true,
            scheme: "#{environment} todo-app",
            export_method: "app-store",
            export_options: {
                signingStyle: "manual",
                provisioningProfiles: {
                    DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
                }
            }
        )
    end
    
    lane :deploy_to_tf do
        upload_to_testflight(
            apple_id: "#{DEVELOPER_APP_ID}",
            app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
            skip_waiting_for_build_processing: true,
            skip_submission: true,
            distribute_external: false,
            notify_external_testers: false,
            ipa: "./todo-app.ipa"
        )
    end
    
    lane :deploy_to_as do |scheme|
        build(environment: "prod")
        deliver(
            force: false,
            submit_for_review: false,
            metadata_path: "./metadata",
            skip_screenshots: true,
        )
    end

    after_all do |lane, options|
        delete_temp_keychain("todo-keychain")
    end

end
